from aiogram.dispatcher import FSMContext
from aiogram.types import Message, CallbackQuery
import requests
from aiogram import types
from bot_token import dp, bot
from aiogram.dispatcher.filters.builtin import CommandStart
from sqlight import register_user, gg, register_request, get_summa, delete_request, users_id
from but import *
from aiogram.types import ReplyKeyboardRemove


@dp.channel_post_handler(state='*')
async def for_message(message: types.Message):
    message_id = message.message_id
    users = users_id()
    for user in users:
        await bot.forward_message(from_chat_id='-1001430995089', chat_id=user, message_id=message_id)


@dp.message_handler(CommandStart(), state='*')
async def start_Go(msg: Message, state: FSMContext):
    await state.finish()
    await bot.send_message(chat_id=msg.chat.id, text=f'–ê—Å—Å–∞–ª–æ–º—É –∞–ª–∞–π–∫—É–º {msg.chat.full_name} üëã\n\"BB Logistics\"–Ω–∏–Ω–≥ '
                                                     f'—Ä–∞—Å–º–∏–π –±–æ—Ç–∏–≥–∞ —Ö—É—à –∫–µ–ª–∏–±—Å–∏–∑ üöõ\n–ò–ª—Ç–∏–º–æ—Å —Ç–∏–ª–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ üëáüèª\n\n–ó–¥—Ä–∞—Å—Ç–≤—É–π—Ç–µ —É–≤–∞–∂–∞–µ–º—ã–π {msg.chat.full_name} üëã\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç \"BB Logistics\" üöõ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ üëáüèª',
                           reply_markup=til())


@dp.message_handler(lambda message: message.text in ['üîô –û—Ä—Ç–≥–∞', 'üîô –ù–∞–∑–∞–¥'], state='*')
async def go_main(message: Message, state: FSMContext):
    await state.finish()
    if message.text == 'üîô Ortga':
        await bot.send_message(chat_id=message.chat.id, text='–°–∏–∑ –æ—Ä—Ç–≥–∞ “õ–∞–π—Ç–¥–∏–Ω–≥–∏–∑', reply_markup=ReplyKeyboardRemove())
    else:
        await bot.send_message(chat_id=message.chat.id, text='–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥', reply_markup=ReplyKeyboardRemove())
    await bot.send_message(chat_id=message.chat.id,
                           text=f'–ê—Å—Å–∞–ª–æ–º—É –∞–ª–∞–π–∫—É–º {message.chat.full_name} üëã\n\"BB Logistics\"–Ω–∏–Ω–≥ '
                                f'—Ä–∞—Å–º–∏–π –±–æ—Ç–∏–≥–∞ —Ö—É—à –∫–µ–ª–∏–±—Å–∏–∑ üöõ\n–ò–ª—Ç–∏–º–æ—Å —Ç–∏–ª–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ üëáüèª\n\n–ó–¥—Ä–∞—Å—Ç–≤—É–π—Ç–µ —É–≤–∞–∂–∞–µ–º—ã–π {message.chat.full_name} üëã\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç \"BB Logistics\" üöõ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ üëáüèª',
                           reply_markup=til())


@dp.message_handler(lambda message: message.text in ['‚óÄÔ∏è–û—Ä“õ–∞–≥–∞', '‚óÄÔ∏è–ù–∞–∑–∞–¥'], state='*')
async def go_main(message: Message, state: FSMContext):
    if gg(message.chat.id)[0] == 'uz':
        await bot.send_message(chat_id=message.chat.id, text='üë§ –®–∞—Ö—Å–∏–π –∫–∞–±–∏–Ω–µ—Ç', parse_mode='HTML',
                               reply_markup=mainkeys(gg(message.chat.id)[0]))
        await state.set_state('get_com')
    else:
        await bot.send_message(chat_id=message.chat.id, text='üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', parse_mode='HTML',
                               reply_markup=mainkeys(gg(message.chat.id)[0]))
        await state.set_state('get_com')


@dp.callback_query_handler(lambda call: call.data in ['uz', 'ru'])
async def til_tanlash(call: CallbackQuery, state: FSMContext):
    register_user(user=call.from_user.id, lang=call.data, ism=call.from_user.first_name)
    if call.data == 'uz':
        text = '–°–∏–∑ –£–∑–±–µ–∫ üá∫üáø —Ç–∏–ª–∏–Ω–∏ —Ç–∞–Ω–ª–∞–¥–∏–Ω–≥–∏–∑. –ú–∞—ä–ª—É–º–æ—Ç –æ–ª–∏—à —É—á—É–Ω –∏–ª—Ç–∏–º–æ—Å –µ—Ç–∫–∞–∑–∏—à ID —Ä–∞“õ–∞–º–∏–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥ ‚úè'
    else:
        text = '–í—ã –≤—ã–±—Ä–∞–ª–∏ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫ üá∑üá∫. –í–≤–æ–¥–∏—Ç–µ ID –ø–µ—Ä–µ–≤–æ–∑–∫–∏  —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ ‚úè'
    await state.set_state('main')
    await bot.edit_message_text(chat_id=call.from_user.id, text=text, message_id=call.message.message_id)


@dp.message_handler(state='main')
async def main(message: Message, state: FSMContext):
    req_id = message.text
    if not req_id.isdigit():
        if gg(message.chat.id)[0] == 'uz':
            await message.answer(text='–ë—É–Ω–¥–∞–π –µ—Ç–∫–∞–∑–∏—à ID si –º–∞–≤–∂—É–¥ —ç–º–∞—Å ‚ùå', parse_mode='HTML')
        else:
            await message.answer(text='–ù–µ —Å—É—â–µ—É—Å—Ç–≤—É–µ—Ç c —Ç–∞–∫–∏–º ID –ø–µ—Ä–µ–≤–æ–∑–∫–∏ ‚ùå', parse_mode='HTML')
        await state.set_state("main")
    else:
        await state.finish()
        ship_id = ''
        cost = ''
        url = 'http://185.65.202.117:7979/leads/'
        try:
            resp = requests.get(url + req_id)
            a = resp.json()
            if a.get('id'):
                cost = a.get('price')
                a = a.get('custom_fields_values')
                for i in a:
                    if i.get('field_name') == '–ü–µ—Ä–µ–≤–æ–∑–∫–∞':
                        ship_id = i.get('values')[0].get('value')
                register_request(user_id=message.chat.id, req_id=req_id, ship_id=ship_id, cost=cost)
                if gg(message.chat.id)[0] == 'uz':
                    await bot.send_message(chat_id=message.chat.id, text='üë§ –®–∞—Ö—Å–∏–π –∫–∞–±–∏–Ω–µ—Ç', parse_mode='HTML',
                                           reply_markup=mainkeys(gg(message.chat.id)[0]))
                    await state.set_state('get_com')
                else:
                    await bot.send_message(chat_id=message.chat.id, text='üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', parse_mode='HTML',
                                           reply_markup=mainkeys(gg(message.chat.id)[0]))
                    await state.set_state('get_com')
            else:
                if gg(message.chat.id)[0] == 'uz':
                    await message.answer(text='–ë—É–Ω–¥–∞–π –µ—Ç–∫–∞–∑–∏—à ID si –º–∞–≤–∂—É–¥ —ç–º–∞—Å ‚ùå', parse_mode='HTML')
                else:
                    await bot.edit_message_text(text='–ù–µ —Å—É—â–µ—É—Å—Ç–≤—É–µ—Ç c —Ç–∞–∫–∏–º ID –ø–µ—Ä–µ–≤–æ–∑–∫–∏ ‚ùå', parse_mode='HTML')
                await state.set_state('main')
        except Exception as exxx:
            print(exxx)
            if gg(message.chat.id)[0] == 'uz':
                await message.answer(text='–ë—É–Ω–¥–∞–π –µ—Ç–∫–∞–∑–∏—à ID si –º–∞–≤–∂—É–¥ —ç–º–∞—Å ‚ùå', parse_mode='HTML')
            else:
                await bot.edit_message_text(text='–ù–µ —Å—É—â–µ—É—Å—Ç–≤—É–µ—Ç c —Ç–∞–∫–∏–º ID –ø–µ—Ä–µ–≤–æ–∑–∫–∏ ‚ùå', parse_mode='HTML')
            await state.set_state("main")


@dp.message_handler(state='get_com')
async def get_command(message: Message, state: FSMContext):
    com = message.text
    if com == '‚ùáÔ∏è –£–º—É–º–∏–π –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä' or com == '‚ùáÔ∏è –û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ':
        markup = await all_keyboard(message.from_user.id)
        if markup is not None:
            lang = gg(message.chat.id)[0]
            if lang == 'uz':
                await bot.send_message(chat_id=message.from_user.id, text='‚ùáÔ∏è –£–º—É–º–∏–π –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä –±—û–ª–∏–º–∏',
                                       reply_markup=ReplyKeyboardRemove())
                await bot.send_message(chat_id=message.from_user.id, text="–ö–µ—Ä–∞–∫–ª–∏ ID –Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ üëá",
                                       reply_markup=markup)
            else:
                await bot.send_message(chat_id=message.from_user.id, text='‚ùáÔ∏è –†–∞–∑–¥–µ–ª –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏',
                                       reply_markup=ReplyKeyboardRemove())
                await bot.send_message(chat_id=message.from_user.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π ID üëá",
                                       reply_markup=markup)
            await state.set_state('get_info')
        else:
            lang = gg(message.chat.id)[0]
            if lang == 'uz':
                await bot.send_message(chat_id=message.from_user.id, text="–†—û–π—Ö–∞—Ç –±—û—à. –Ø–Ω–≥–∏ ID –Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥ üëá",
                                       reply_markup=back_main(lang))
            else:
                await bot.send_message(chat_id=message.from_user.id, text="–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä üëá",
                                       reply_markup=back_main(lang))
            await state.set_state('main')
    if com == 'üóë‚ùå ID –Ω–∏ —û—á–∏—Ä–∏—à' or com == 'üóë‚ùå –£–¥–∞–ª–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä':
        lang = gg(message.chat.id)[0]
        markup = await all_keyboard(message.from_user.id)
        if markup is not None:
            if lang == 'uz':
                await bot.send_message(chat_id=message.from_user.id, text='üóë ID –Ω–∏ —û—á–∏—Ä–∏—à –±—û–ª–∏–º–∏',
                                       reply_markup=ReplyKeyboardRemove())
                await bot.send_message(chat_id=message.from_user.id, text="–ö–µ—Ä–∞–∫–ª–∏ ID –Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ üëá",
                                       reply_markup=markup)
            else:
                await bot.send_message(chat_id=message.from_user.id, text='üóë P–∞–∑–¥–µ–ª y–¥–∞–ª–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞',
                                       reply_markup=ReplyKeyboardRemove())
                await bot.send_message(chat_id=message.from_user.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π ID üëá",
                                       reply_markup=markup)
            await state.set_state('delete_request')
        else:
            lang = gg(message.chat.id)[0]
            if lang == 'uz':
                await bot.send_message(chat_id=message.from_user.id, text="–†—û–π—Ö–∞—Ç –±—û—à. –Ø–Ω–≥–∏ ID –Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥ üëá",
                                       reply_markup=back_main(lang))
            else:
                await bot.send_message(chat_id=message.from_user.id, text="–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä üëá",
                                       reply_markup=back_main(lang))
            await state.set_state('main')
    elif com == 'üÜï –Ø–Ω–≥–∏ ID “õ—û—à–∏—à' or com == 'üÜï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä':
        lang = gg(message.chat.id)[0]
        if lang == 'uz':
            await bot.send_message(chat_id=message.from_user.id, text="Yangi ID ni kiriting üëá",
                                   reply_markup=back_main(lang))
        else:
            await bot.send_message(chat_id=message.from_user.id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä üëá",
                                   reply_markup=back_main(lang))
        await state.set_state('main')
    elif com == '‚ôªÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫' or com == '‚ôªÔ∏è –¢–∏–ª–Ω–∏ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏—à':
        await bot.send_message(chat_id=message.chat.id,
                               text=f'–ò–ª—Ç–∏–º–æ—Å —Ç–∏–ª–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ üëáüèª\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ üëáüèª',
                               reply_markup=til())
        await state.set_state('change_lang')
    elif com == 'üí¥ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å' or com == 'üí¥ –£–º—É–º–∏–π –±–∞–ª–∞–Ω—Å':
        # summa = get_summa(message.from_user.id)
        # lang = gg(message.chat.id)[0]
        # if lang == 'uz':
        #     await bot.send_message(chat_id=message.from_user.id, text=f"üí¥ –£–º—É–º–∏–π –±–∞–ª–∞–Ω—Å: ${summa}")
        # else:
        #     await bot.send_message(chat_id=message.from_user.id, text=f"üí¥ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${summa}")
        # await state.set_state('get_com')
        markup = await all_keyboard(message.from_user.id)
        if markup is not None:
            lang = gg(message.chat.id)[0]
            if lang == 'uz':
                await bot.send_message(chat_id=message.from_user.id, text='üí¥ –£–º—É–º–∏–π –±–∞–ª–∞–Ω—Å–ª–∞—Ä –±—û–ª–∏–º–∏',
                                       reply_markup=ReplyKeyboardRemove())
                await bot.send_message(chat_id=message.from_user.id, text="–ö–µ—Ä–∞–∫–ª–∏ ID –Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ üëá",
                                       reply_markup=markup)
            else:
                await bot.send_message(chat_id=message.from_user.id, text='üí¥ –†–∞–∑–¥–µ–ª  –æ–±—â–∏—Ö –±–∞–ª–∞–Ω—Å–æ–≤',
                                       reply_markup=ReplyKeyboardRemove())
                await bot.send_message(chat_id=message.from_user.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π ID üëá",
                                       reply_markup=markup)
            await state.set_state('get_finance')
        else:
            lang = gg(message.chat.id)[0]
            if lang == 'uz':
                await bot.send_message(chat_id=message.from_user.id, text="–†—û–π—Ö–∞—Ç –±—û—à. –Ø–Ω–≥–∏ ID –Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥ üëá",
                                       reply_markup=back_main(lang))
            else:
                await bot.send_message(chat_id=message.from_user.id, text="–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä üëá",
                                       reply_markup=back_main(lang))
            await state.set_state('main')
    elif com == 'üîô –ù–∞–∑–∞–¥' or com == 'üîô –û—Ä—Ç–≥–∞':
        await state.finish()
        await bot.send_message(chat_id=message.chat.id,
                               text=f'–ê—Å—Å–∞–ª–æ–º—É –∞–ª–∞–π–∫—É–º {message.chat.full_name} üëã\n\"BB Logistics\"–Ω–∏–Ω–≥ '
                                    '—Ä–∞—Å–º–∏–π –±–æ—Ç–∏–≥–∞ —Ö—É—à –∫–µ–ª–∏–±—Å–∏–∑ üöõ\n–ò–ª—Ç–∏–º–æ—Å —Ç–∏–ª–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ üëáüèª\n\n–ó–¥—Ä–∞—Å—Ç–≤—É–π—Ç–µ —É–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–≤–∞—Ç–µ–ª—å üëã\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç \"BB Logistics\" üöõ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ üëáüèª',
                               reply_markup=til())


@dp.callback_query_handler(state='change_lang')
async def change(call: CallbackQuery, state: FSMContext):
    register_user(user=call.from_user.id, lang=call.data, ism=call.from_user.first_name)
    await call.message.delete()
    if call.data == 'uz':
        text = '–°–∏–∑ –£–∑–±–µ–∫ üá∫üáø —Ç–∏–ª–∏–Ω–∏ —Ç–∞–Ω–ª–∞–¥–∏–Ω–≥–∏–∑'
        await bot.send_message(chat_id=call.from_user.id, text=text, reply_markup=mainkeys(call.data))
    else:
        text = '–í—ã –≤—ã–±—Ä–∞–ª–∏ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫ üá∑üá∫.'
        await bot.send_message(chat_id=call.from_user.id, text=text, reply_markup=mainkeys(call.data))
    await state.set_state('get_com')


@dp.callback_query_handler(state='delete_request')
async def del_request(call: types.CallbackQuery, state: FSMContext):
    id = call.from_user.id
    data = call.data
    delete_request(user_id=id, req_id=data)
    await call.message.delete()
    if gg(id)[0] == 'uz':
        await bot.send_message(chat_id=call.from_user.id, text='üë§ –®–∞—Ö—Å–∏–π –∫–∞–±–∏–Ω–µ—Ç', parse_mode='HTML',
                               reply_markup=mainkeys(gg(id)[0]))
        await state.set_state('get_com')
    else:
        await bot.send_message(chat_id=call.from_user.id, text='üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', parse_mode='HTML',
                               reply_markup=mainkeys(gg(id)[0]))
        await state.set_state('get_com')
    await state.set_state('get_com')


@dp.callback_query_handler(state='get_info')
async def get_by_id(call: CallbackQuery, state: FSMContext):
    if gg(call.from_user.id):
        await call.message.delete()
        await bot.send_message(chat_id=call.from_user.id, text='‚è≥')
        url = 'http://185.65.202.117:7979/leads/'
        numb = call.data
        resp = requests.get(url + numb)
        a = resp.json()
        # print("Qaniii: ", a)
        cont = ''
        data = ''
        mesto = ''
        disl = ''
        punkt = ''
        yon = ''
        otp = ''
        kont = ''
        avto = ''
        avia = ''
        vagon = ''
        prib = ''
        oplata = ''
        ros = ''
        if a.get('id'):
            cost = a.get('price')
            a = a.get('custom_fields_values')

            # print(a)
            text = f'üÜî {numb} ‚úÖ\n'
            for i in a:
                if i.get('field_name') == '–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞':
                    cont += i.get('values')[0].get('value')
                elif i.get('field_name') == '–î–∞—Ç–∞ –ø–æ–≥—Ä—É–∑–∫–∏':
                    data += i.get('values')[0].get('value')
                elif i.get('field_name') == '–ú–µ—Å—Ç–æ –ø–æ–≥—Ä—É–∑–∫–∏':
                    mesto += i.get('values')[0].get('value')
                elif i.get('field_name') == '–î–∏—Å–ª–æ–∫–∞—Ü–∏—è':
                    disl += i.get('values')[0].get('value')
                elif i.get('field_name') == '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ':
                    ros += i.get('values')[0].get('value')
                elif i.get('field_name') == '–ü—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è':
                    punkt += i.get('values')[0].get('value')
                elif i.get('field_name') == '–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏':
                    otp += i.get('values')[0].get('value')
                elif i.get('field_name') == 'Yo\'nalish':
                    yon += i.get('values')[0].get('value')
                elif i.get('field_name') == '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä':
                    kont += i.get('values')[0].get('value')
                elif i.get('field_name') == '–ê–≤—Ç–æ':
                    avto += i.get('values')[0].get('value')
                elif i.get('field_name') == '–ê–≤–∏–∞':
                    avia += i.get('values')[0].get('value')
                elif i.get('field_name') == '–í–∞–≥–æ–Ω':
                    vagon += i.get('values')[0].get('value')
                elif i.get('field_name') == '–î–∞—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏–µ':
                    prib += i.get('values')[0].get('value')
                elif i.get('field_name') == '–û–ø–ª–∞—Ç–∞ (–î–∞—Ç–∞-–°—É–º–º–∞)':
                    oplata += i.get('values')[0].get('value')
            # if oplata:
            #         # print(oplata)
            #     oplata = oplata.split("/")
            #     oplata = oplata[0].split('$')
            # else:
            #     oplata = '0'                
            
            if gg(call.from_user.id)[0] == 'uz':
                # text += f'üíµ <b>–ë—é–¥–∂–µ—Ç</b>: ${cost}\n'
                # if oplata != '':
                #     text += f'üí∞ <b>–¢—û–ª–æ–≤ (—Å–∞–Ω–∞-—Å—É–º–º–∞)</b>: {oplata}\n'
                # if oplata == '':
                #     text += f'üí∞ <b>–¢—û–ª–æ–≤ (—Å–∞–Ω–∞-—Å—É–º–º–∞)</b>: ----- \n'
                if cont:
                    text += f'üî¢ <b>–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–∞“õ–∞–º–∏</b>: {cont}\n'
                if kont != '':
                    text += f'‚è∫ <b>–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä</b>: {kont}\n'
                if avto != '':
                    text += f'üöõ <b>–ê–≤—Ç–æ</b>: {avto}\n'
                if avia != '':
                    text += f'‚úàÔ∏è <b>–ê–≤–∏–∞</b>: {avia}\n'
                if vagon != '':
                    text += f'üöã <b>–í–∞–≥–æ–Ω</b>: {vagon}\n'
                if data:
                    text += f'üìÖ <b>–Æ–∫–ª–∞—à —Å–∞–Ω–∞—Å–∏</b>: {data}\n'
                if mesto:
                    text += f'üåè <b>–Æ–∫–ª–∞—à –º–∞–Ω–∑–∏–ª–∏</b>: {mesto}\n'
                if otp:
                    text += f'üìÖ <b>–Æ–±–æ—Ä–∏—à —Å–∞–Ω–∞—Å–∏</b>: {otp}\n'
                if disl:
                    text += f'üìç <b>–î–∏—Å–ª–æ–∫–∞—Ü–∏—è</b>: {disl}\n'
                if ros:
                    text += f'‚ÜîÔ∏è <b>–ú–∞—Å–æ—Ñ–∞</b>: {ros}\n'
                if punkt:
                    text += f'üèÅÔ∏è <b>–ï—Ç–∫–∞–∑–∏—à –º–∞–Ω–∑–∏–ª–∏</b>: {punkt}\n'
                if prib:
                    text += f'üìÖ <b>–ö–µ–ª–∏—à —Å–∞–Ω–∞—Å–∏</b>: {prib}\n'
                if yon:
                    text += f'üåê <b>–ô—û–Ω–∞–ª–∏—à –º–∞–Ω–∑–∏–ª–∏</b>: {yon}\n'
                txt = "üë§ –®–∞—Ö—Å–∏–π –∫–∞–±–∏–Ω–µ—Ç"
            else:
                txt = 'üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'
                # text += f'üíµ <b>–ë—é–¥–∂–µ—Ç</b>: ${cost}\n'
                # if oplata != '':
                #     text += f'üí∞ <b>–û–ø–ª–∞—Ç–∞ (–î–∞—Ç–∞-–°—É–º–º–∞)</b>: {oplata}\n'
                # if oplata == '':
                #     text += f'üí∞ <b>–û–ø–ª–∞—Ç–∞ (–î–∞—Ç–∞-–°—É–º–º–∞)</b>: -- -- \n'
                if cont:
                    text += f'üî¢ <b>–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞</b>: {cont}\n'
                if kont != '':
                    text += f'‚è∫ <b>–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä</b>: {kont}\n'
                if avto != '':
                    text += f'üöõ <b>–ê–≤—Ç–æ</b>: {avto}\n'
                if avia != '':
                    text += f'‚úàÔ∏è <b>–ê–≤–∏–∞</b>: {avia}\n'
                if vagon != '':
                    text += f'üöã <b>–í–∞–≥–æ–Ω</b>: {vagon}\n'
                if data:
                    text += f'üìÖ <b>–î–∞—Ç–∞ –ø–æ–≥—Ä—É–∑–∫–∏</b>: {data}\n'
                if mesto:
                    text += f'üåè <b>–ú–µ—Å—Ç–æ –ø–æ–≥—Ä—É–∑–∫–∏</b>: {mesto}\n'
                if otp:
                    text += f'üìÖ <b>–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏</b>: {otp}\n'
                if disl:
                    text += f'üìç <b>–î–∏—Å–ª–æ–∫–∞—Ü–∏—è</b>: {disl}\n'
                if ros:
                    text += f'‚ÜîÔ∏è <b>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ</b>: {ros}'
                if prib:
                    text += f'üìÖ <b>–î–∞—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏–µ</b>: {prib}\n'
                if yon:
                    text += f'üåê <b>–ú–µ—Å—Ç–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</b>: {yon}\n'
                if punkt:
                    text += f'üèÅÔ∏è <b>–ú–µ—Å—Ç–æ –¥–æ—Å—Ç–∞–≤–∫–∏</b>: {punkt}\n'

            await bot.delete_message(message_id=call.message.message_id + 1, chat_id=call.from_user.id, )
            await bot.send_message(text=text, chat_id=call.from_user.id,
                                   parse_mode='HTML', reply_markup=ReplyKeyboardRemove())

            await bot.send_message(text=txt, chat_id=call.from_user.id, parse_mode='HTML',
                                   reply_markup=mainkeys(gg(call.message.chat.id)[0]))
            await state.set_state('get_com')
        else:
            if gg(call.from_user.id)[0] == 'uz':
                await bot.edit_message_text(text='–ë—É–Ω–¥–∞–π ID –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –º–∞–≤–∂—É–¥ —ç–º–∞—Å ‚ùå',
                                            message_id=call.message.message_id + 1,
                                            chat_id=call.from_user.id, parse_mode='HTML')
            else:
                await bot.edit_message_text(text='–ù–µ —Å—É—â–µ—É—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Ç–∞–∫–∏–º ID ‚ùå',
                                            message_id=call.message.message_id + 1,
                                            chat_id=call.from_user.id, parse_mode='HTML')
    else:
        await bot.send_message(chat_id=call.from_user.id,
                               text='–ò–ª—Ç–∏–º–æ—Å —Ç–∏–ª–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ üëáüèª\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ üëáüèª',
                               reply_markup=til())


@dp.callback_query_handler(state='get_finance')
async def get_by_id(call: CallbackQuery, state: FSMContext):
    if gg(call.from_user.id):
        await call.message.delete()
        await bot.send_message(chat_id=call.from_user.id, text='‚è≥')
        url = 'http://185.65.202.117:7979/leads/'
        numb = call.data
        resp = requests.get(url + numb)
        cost = ''
        oplata = ''
        a = resp.json()
        if a.get('id'):
            cost = a.get('price')
            a = a.get('custom_fields_values')

            text = f'üÜî {numb} ‚úÖ\n'
            for i in a:
                if i.get('field_name') == '–û–ø–ª–∞—Ç–∞ (–î–∞—Ç–∞-–°—É–º–º–∞)':
                    oplata += i.get('values')[0].get('value')
            # print("AAAAAAAAAAA", oplata)
            # oplata = '220$ / 09.09.2022 / ‚úÖ '
            # oplata = oplata.replace("/ ??", "")
            # print(oplata)
            # oplata = oplata.split("/ ??")
            # oplata.remove(oplata[len(oplata) - 1])
            if "+" in oplata or '-' in oplata:                
                oplata = oplata.split("//")
                if gg(call.from_user.id)[0] == 'uz':
                    text += f'üíµ <b>–ë—é–¥–∂–µ—Ç</b>: ${cost}\n\n'
                    if oplata != ['']:
                        print(oplata)
                        opl = 0
                        n = 1
                        for i in oplata:
                            i = i.split("/")
                            print(i)
                            text += f'{n}) <b>–¢—û–ª–æ–≤ </b>: {i[0]}\n'
                            text += f'     <b>–°–∞–Ω–∞ </b>: {i[1]}'
                            if '+' in i[2]:
                                text += " / <b>“ö–∞–±—É–ª “õ–∏–ª–∏–Ω–¥–∏</b> ‚úÖ\n\n"
                            elif '-' in i[2]:
                                text += " / <b>“ö–∞–±—É–ª “õ–∏–ª–∏–Ω–º–∞–¥–∏</b> ‚ùå\n\n"
                            else:
                                text += "\n\n"

                            opl += int(i[0].split('$')[0])
                            n += 1
                        text += f"   <b>üí∞ “ö–æ–ª–¥–∏“õ</b> : ${int(cost)-opl}"
                            
                    if oplata == ['']:
                        text += f'üí∞ <b>–¢—û–ª–æ–≤ (—Å–∞–Ω–∞-—Å—É–º–º–∞)</b>: ----- \n'
                    txt = "üë§ –®–∞—Ö—Å–∏–π –∫–∞–±–∏–Ω–µ—Ç"
                else:
                    txt = 'üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'
                    text += f'üíµ <b>–ë—é–¥–∂–µ—Ç</b>: ${cost}\n'
                    if oplata != ['']:
                        opl = 0
                        n = 1
                        for i in oplata:
                            i = i.split("/")
                            text += f'{n}) <b>–û–ø–ª–∞—Ç–∞ </b>: {i[0]}\n'
                            text += f'     <b>–î–∞—Ç–∞ </b>: {i[1]}'
                            if '‚úÖ' in i[2]:
                                text += " / <b>–ü—Ä–∏–Ω—è—Ç–æ</b> ‚úÖ\n\n"
                            elif '‚ùå' in i[2]:
                                text += " / <b>–ù–µ –ø—Ä–∏–Ω—è—Ç–æ</b> ‚ùå\n\n"
                            else:
                                text += "\n\n"
                            opl += int(i[0].split('$')[0])
                            n += 1
                        text += f"   <b>–û—Å—Ç–∞–ª–æ—Å—å</b> : ${int(cost)-opl}"
                    if oplata == ['']:
                        text += f'üí∞ <b>–û–ø–ª–∞—Ç–∞ (–î–∞—Ç–∞-–°—É–º–º–∞)</b>: -- -- \n'
            else:
                oplata = oplata.split("/ ??")
                oplata.remove(oplata[len(oplata) - 1])
                if gg(call.from_user.id)[0] == 'uz':
                    text += f'üíµ <b>–ë—é–¥–∂–µ—Ç</b>: ${cost}\n\n'
                    if oplata != ['']:
                        opl = 0
                        n = 1
                        for i in oplata:
                            i = i.split("/")
                            print(i)
                            text += f'{n}) <b>–¢—û–ª–æ–≤ </b>: {i[0]}\n'
                            text += f'     <b>–°–∞–Ω–∞ </b>: {i[1]}'
                            text += "\n\n"

                            opl += int(i[0].split('$')[0])
                            n += 1
                        text += f"   <b>üí∞ “ö–æ–ª–¥–∏“õ</b> : ${int(cost)-opl}"
                            
                    if oplata == ['']:
                        text += f'üí∞ <b>–¢—û–ª–æ–≤ (—Å–∞–Ω–∞-—Å—É–º–º–∞)</b>: ----- \n'
                    txt = "üë§ –®–∞—Ö—Å–∏–π –∫–∞–±–∏–Ω–µ—Ç"
                else:
                    txt = 'üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'
                    text += f'üíµ <b>–ë—é–¥–∂–µ—Ç</b>: ${cost}\n'
                    if oplata != ['']:
                        opl = 0
                        n = 1
                        for i in oplata:
                            i = i.split("/")
                            text += f'{n}) <b>–û–ø–ª–∞—Ç–∞ </b>: {i[0]}\n'
                            text += f'     <b>–î–∞—Ç–∞ </b>: {i[1]}'
                            text += "\n\n"
                            opl += int(i[0].split('$')[0])
                            n += 1
                        text += f"   <b>–û—Å—Ç–∞–ª–æ—Å—å</b> : ${int(cost)-opl}"
                    if oplata == ['']:
                        text += f'üí∞ <b>–û–ø–ª–∞—Ç–∞ (–î–∞—Ç–∞-–°—É–º–º–∞)</b>: -- -- \n'
                        
            await bot.delete_message(message_id=call.message.message_id + 1, chat_id=call.from_user.id, )
            await bot.send_message(text=text, chat_id=call.from_user.id,
                                   parse_mode='HTML', reply_markup=ReplyKeyboardRemove())

            await bot.send_message(text=txt, chat_id=call.from_user.id, parse_mode='HTML',
                                   reply_markup=mainkeys(gg(call.message.chat.id)[0]))
            await state.set_state('get_com')
        else:
            if gg(call.from_user.id)[0] == 'uz':
                await bot.edit_message_text(text='–ë—É–Ω–¥–∞–π ID –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –º–∞–≤–∂—É–¥ —ç–º–∞—Å ‚ùå',
                                            message_id=call.message.message_id + 1,
                                            chat_id=call.from_user.id, parse_mode='HTML')
            else:
                await bot.edit_message_text(text='–ù–µ —Å—É—â–µ—É—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Ç–∞–∫–∏–º ID ‚ùå',
                                            message_id=call.message.message_id + 1,
                                            chat_id=call.from_user.id, parse_mode='HTML')
    else:
        await bot.send_message(chat_id=call.from_user.id,
                               text='–ò–ª—Ç–∏–º–æ—Å —Ç–∏–ª–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ üëáüèª\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ üëáüèª',
                               reply_markup=til())

